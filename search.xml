<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[sql基本语法]]></title>
    <url>%2F2019%2F02%2F25%2Fsql%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[– sql基本语法– DDL数据定义操作– DML数据操作语言– DCL数据控制语言– 注意：SQL中大小写不明感，语句结尾必须用分号– 一DDL-主要提供数据库的表的创建，删除和修改– 1.创建数据库：CREATE DATABASE school; – 直接创建数据库CREATE DATABASE IF NOT EXISTS school；– 如果不存在就创建CREATE DATABASE IF NOT EXISTS school DEFAULT CHARSET UTF8;– 创建数据库的时候设置字符集编码方式为utf8，支持中文– 2.删除数据库：DROP DATABASE school;– 直接删除数据库DROP DATABASE IF EXISTS school; – 如果存在才删除– 3.切换/使用数据库：use 数据库USE school;– 4. 新建表：CREATE TABLE 表名（字段1 类型1，字段2 类型2，…）；– 注意：a.表名一般需要加前缀’t’或者’tb’– b.字段用来确定要存那些数据，名字随便命名，但是不能是关键字– c.类型必须是mysql支持的数据类型– 常用数据类型：int,char(size),varchar(size),text,BIT布尔，date日期– 常用约束：NOT NULL -不能为空，DEFAULT - 设置默认值，UNIQUE -唯一– PRIMARY KEY -主键，主键是指表中能够唯一标识一条记录的字段（通过主键值能够找到表中唯一一行记录）– auto_increment自动增长,只针对主键有效，并且主键类型是整型;CREATE TABLE IF NOT EXISTS t_student(stuid int PRIMARY KEY auto_increment,stuname VARCHAR(20),gender bit NOT NULL,birth DATE);– 5.删除表：DROP TABLE IF EXISTS 表名;– 清空表中记录：TRUNCATE 表名DROP TABLE IF EXISTS t_student;– 6.修改表：ALTER TABLE 表名 ADD COLUMN 字段名 字段类型 约束;ALTER TABLE t_student ADD COLUMN sgrade FLOAT(5,2) NOT NULL;– 7.删除字段：ALTER TABLE t_student DROP COLUMN 字段名ALTER TABLE t_student DROP COLUMN sgrade;– 二、DML数据操作语言 -主要是增删改查– 1.增（增加记录）INSERT INTO 表名 VALUES(值1，值2，值3) -依次给指定表中的字段赋值INSERT INTO t_student VALUES(1001,’张三’,1,’1996-10-23’);– 1.2插入数据：INSERT INTO 表名(字段1，字段2….) VALUES(值1,值2);– 注意：字符串的值要用引号引起来，时间可以是满足时间格式的字符串，也可以是时间函数获取的值INSERT INTO t_student(stuname,gender) VALUES(‘李四’,0);– 时间函数：NOW() -当前时间 YEAR(NOW()) -当前年 MONTH(NOW())当前月INSERT INTO t_student(stuname,gender,birth) VALUES(‘鹏总’,0,date(NOW())),(‘曾总’,1,date(NOW())),(‘令总’,1,date(NOW()));– 2.删除 DELETE FROM 表名； -删除指定表中所有记录DELETE FROM t_student;– 2.1 DELETE FROM 表名 WHERE 条件语句； -删除满足条件的记录– 条件语句：=（判断是否相等）,&lt;&gt;(不等于),&gt;=,&lt;=DELETE FROM t_student WHERE stuid=1002;– 3.改 UPDATE 表名 SET 字段=新值; 将指定表中所有的指定列/字段的值赋值为新值– 3.2，满足条件的改变：UPDATE 表名 SET 字段1=新值1，字段2=新值2…WHERE 条件语句– %通配符：表示任意个数的任意字符（包括0个）– _通配符：表示一个任意字符UPDATE t_student SET birth=’1995-2-3’ WHERE stuname=’曾总’;UPDATE t_student SET birth=’1996-6-6’ WHERE stuname LIKE ‘%总’;UPDATE t_student SET birth=’1986-6-6’ WHERE stuname LIKE ‘曾_’;– 匹配两个名字姓曾的人– 4.查 直接查询 SELECT FROM 表名； 获取所有数据SELECT FROM t_student;– 4.2 SELECT 字段1，字段2，…FROM 表名; -获取指定表中所有行指定的列SELECT stuname FROM t_student;– 4.3获取所有满足条件的行：SELECT FROM 表名 WHERE 条件；SELECT FROM t_student WHERE gender=0;– 4.4 列重命名– SELECT 字段1 as 新字段1，字段2 as 新字段2… FROM 表名;不能重命名– as可以省略，但是最好不省略SELECT stuname AS ‘姓名’,stuid AS ‘学号’ FROM t_student;– 4.5 对查询结果重新复制（一般针对布尔数据）– SELECT IF(字段相关的条件语句，值1，值2) FROM 表名; -查询指定字段，并且判断字段对应的值是0还是1– 如果是1结果为值1，如果是0结果为值2，这儿的if用法是MySQL专有的。SELECT stuname,IF(gender,’男’,’女’) AS ‘性别’ FROM t_student;SELECT CASE gender WHEN 1 THEN ‘男’ ELSE ‘女’END FROM t_student;– 4.6列的合并运算– SELECT CONCAT(str1,str2,…) FROM 表名;SELECT CONCAT(stuname,stuid) FROM t_student;– 注意：数字和字符串数据可以合并，bit类型数据不可以合并– 4.7模糊查询 -查询的时候通过like条件来指定查询对象– sql支持逻辑运算符and和or，NOTSELECT FROM t_student WHERE stuname LIKE ‘%总’ AND stuid &gt; 1008;– 4.8 排序(先按之前的任何语法进行查询再排序)– SELECT FROM 表名 ORDER BY 字段;对查询结果按照指定字段的值进行升序排序– 联排，ORDER BY 后面跟多个条件，条件之间用,隔开SELECT FROM t_student ORDER BY gender ASC,stuid DESC; – 升序SELECT FROM t_student ORDER BY gender DESC; – 降序– 4.9 限制– SELECT FROM 表名 LIMIT 数字； -获取查询结果的前指定条数记录SELECT FROM t_student LIMIT 3;– SELECT FROM 表名 LIMIT 数字 OFFSET N; –对查询结果跳过前N条数据，取M条记录出来SELECT * FROM t_student LIMIT 3 OFFSET 2;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编辑器之神——vim]]></title>
    <url>%2F2019%2F02%2F23%2Fvim%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E%2F</url>
    <content type="text"><![CDATA[vim编辑器之神Vim是一个类似于Vi的著名的功能强大、高度可定制的文本编辑器，在Vi的基础上改进和增加了很多特性。VIM是自由软件。Vim普遍被推崇为类Vi编辑器中最好的一个，事实上真正的劲敌来自Emacs的不同变体。注意：我们常说的的编辑器之神是指vim，而神之编辑器是指Emacs，我们这里介绍的是vim编辑器 配置vimrc配置在shell中可以通过 vim ~/.vimrc 或者 vim /etc/vimrc 打开vimrc文件对vim进行配置。在这个文件中可以进行很多和vim相关的配置，常用的如下（如果对其他配置感兴趣的可以自己百度）： 常用操作1.模式切换我们可以将vim分为命令模式、编辑模式和末行模式三种命令模式：进入vim的时候vim是处于命令模式状态下的，这个时候输入内容不会出现在编辑区 (最末什么都没有) 末行模式：在命令模式下输入冒号，让vim进入末行模式。在末行模式的冒号后面可以输入相关的一些指令进行相关操作 (最后有一个冒号) 编辑模式：在命令模式下按’i’进入编辑模式。在编辑模式下可以对文件内容进行编辑 (最后 –INSERT– 或者 –插入–) ####2.保存和退出在末行模式下输入相应的指令可以对编辑区的内容进行保存和退出vim界面w – 只保存(类似快捷键ctr+s)q – 退出（在编辑区的内容全部都保存的情况下才有效）wq – 保存并退出q! – 强制退出（不保存修改信息） ####3.光标操作以下光标操作都是在命令模式下输入的^(shift+6) – 移动到行首$(shift+4) – 移动到行尾G(shift+g) – 移动到文件末尾行号G – 移动到指定行,例如:30G, 让光标直接跳转到行号是30的那一行gg – 移动到文件开头 ####4.文本操作以下操作不带冒号的是在命令模式下输入，前面有冒号代码后面的内容是在末行模式下输入dd – 删除光标所在的行数字dd – 从光标所在行开始往后面开始删，删除指定数量行内容:%d – 删除所有 yy – 复制光标所在的行数字yy – 从光标所在行开始复制指定行数的内容p – 将复制的内容粘贴到光标所在的位置u – 撤销ctr+r – 反撤销 :%!sort – 对内容排序 :/查找对象[/gice] – 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找 **注意：正则表达式除了表示次数的符号前需要加\，别的和Python是一样的，例如“12:/\d&#123;2&#125; -》查找两个数字：/a\+ --》查找a出现一次或者多次 *:1,$s/被替换对象/替换内容[/gice]* – 将正则表达式匹配到的内容替换成指定内容 - g: 全局匹配 - i: 忽略大小写 - c: 替换时需要提示 - e: 忽略错误]]></content>
      <categories>
        <category>编辑器</category>
      </categories>
      <tags>
        <tag>vim 编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客搭建]]></title>
    <url>%2F2019%2F02%2F23%2FHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[一. 搭建博客使用hexo搭建个人博客前需要先在自己的电脑上装好git和node.js 1 . 首先在自己的电脑上创建一个空的文件夹’Hexo’2 . 在gitbash中终端中通过cd指令进入到刚才创建的文件夹中3 . 输入指令 npm install -g hexo 安装Hexo4 . 输入指令 hexo init 进行初始化5 . 依次输入指令npm install hexo server 启动服务器 博客内容发生改变后可以通过hexo clean hexo generate hexo deploy hexo server刷新后重新启动 二. 部署博客1 . 在github上创建一个空的仓库，仓库名： 用户名.github.io2 . 修改博客本地仓库中的配置文件（Hexo目录下的_config.yml文件）,在文件末尾添加一下选中内容 3 . 使用git部署, 输入指令npm install hexo-deployer-git --save4 . 输入指令hexo clean hexo generate hexo deploy 对博客进行提交]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo 博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL在Linux系统的安装配置]]></title>
    <url>%2F2019%2F02%2F22%2FMySQL%E5%9C%A8Linux%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%20%20-%20%E5%89%AF%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[下载MySQL源安装包: wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm 安装MySQL源: yum localinstall mysql57-community-release-el7-8.noarch.rpm 安装MySQL: yum install mysql-community-server 设置开启启动MySQL服务: systemctl enable mysqld 启动/重启MySQL服务：systemctl restart mysqld 查看MySQL初始密码：grep ‘A temporary password’ /var/log/mysqld.log 更改MySQL密码：mysqladmin -u root -p’旧密码’ password ‘新密码’ 这里更改密码出了问题，更改失败，这是因为密码太过简单的原因。有两个接解决方法： 方法一：把密码设置复杂点（这是最直接的方法） 方法二：关闭mysql密码强度验证(validate_password) 编辑配置文件：vim /etc/my.cnf， 增加这么一行validate_password=off 编辑后重启mysql服务：systemctl restart mysqld 设置mysql能够远程访问: a. 登录进MySQL: mysql -uroot -p密码 b. 增加一个用户给予访问权限: grant all privileges on *.* to &#39;root&#39;@&#39;ip地址&#39; identified by &#39;密码&#39; with grant option; c. 刷新权限：flush privileges;­]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx服务器]]></title>
    <url>%2F2019%2F02%2F22%2FNginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[1.阿里云添加80端口阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口 ![打开安全组设置]添加80端口 2. 安装nginxa) 添加nginx存储库 1yum install epel-release b) 安装nginx 1234 yum install nginx``` c) 运行nginx Nginx不会自行启动。要运行Nginx systemctl start nginx 12nginx的运行命令: systemctl status nginx 查看nginx的状态 systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动 12d) 系统启动时启动Nginx systemctl enable nginx 12e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信： sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=https sudo firewall-cmd --reload 12345### 3.nginx目录共享配置 a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yuting b) 打开 etc/nginx/nginx.conf 文件，设置server #共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表 root /home/yuting; location / { autoindex on; autoindex_exact_size on; autoindex_localtime on; } 12除了可以共享文件，还可以自定义页面 #自定义服务器页面 location / { root /home/yuting; index index.html index.htm; } ` 注意： 如果出现权限问题，可以修改目录的权限 ssh密钥认证1.在主机和从机上执行：ssh-keygen 2.在从机上执行: scp id_rsa.pub root@主机地址:~/.ssh/master.pub(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’) 3.在主机中的.ssh文件夹中创建authorized_keys文件： touch authorized_keys 4.修改文件authorized_keys的权限: chmod 600 authorized_keys 5.将master.pub放进authorized_keys文件中: cat master.pub &gt;&gt; authorized_keys 6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git常用指令]]></title>
    <url>%2F2019%2F02%2F21%2Fgit%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[1.基本指令git init &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; —— 新建git仓库git add 文件/文件夹 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; —— 将文件添加到缓存区中git add -A &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; — 添加所有内容到缓存区中git stutas &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——— 查看git状态git commit -m ‘提交信息’ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 将缓存区中的内容全部提交到git本地仓库中 git log &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——- 查看提交日志 git reset - - hard HEAD &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 让工作目录中的内容和仓库中的内容保持一致git reset --hard HEAD^ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 回到上一个版本git reset - - hard 版本号 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 回到指定的版本git checkout - - 文件名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; —— 从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态) git clone &lt;url&gt; - 将服务器上的项目(仓库)克隆 (使用https地址需要输入密码，使用ssh地址需要添加公钥) git remote add origin 地址 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 关联远程仓库(只需要关联一次) git push [-u] origin master &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 提交(-u在第一次提交分之的时候才用) 2.分之管理创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之;开发一般会自己创建一个develop分之，用来开发和测试;多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发 常见分之： master(主要是合并develop), develop(主要合并下面的其他分支), 功能/人员分之(开发) git branch [-a] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - 查看分之git branch 分之名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 创建分之git checkout 分支名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 切换分之git checkout -b 分之名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - 切换并创建新的分之git diff 分之1 分之2 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 查看两个分之之间的差异git merge 分之名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 让当前分之和指定分之进行合并 注意: 切换分之、push、pull，这些操作前要保证工作区是clean 怎么避免冲突： 不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量)]]></content>
      <categories>
        <category>系统操作</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F02%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
