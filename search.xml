<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Redis数据库基本操作]]></title>
    <url>%2F2019%2F02%2F28%2Fredis%2F</url>
    <content type="text"><![CDATA[123456789 [root@iZwz97tbgo9lkabnat2lo8Z ~]# wget http://download.redis.io/releases/redis-3.2.12.tar.gz[root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip redis-3.2.12.tar.gz[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf redis-3.2.12.tar[root@iZwz97tbgo9lkabnat2lo8Z ~]# cd redis-3.2.12[root@iZwz97tbgo9lkabnat2lo8Z ~]# make &amp;&amp; make install[root@iZwz97tbgo9lkabnat2lo8Z ~]# redis-server --versionRedis server v=3.2.12 sha=00000000:0 malloc=jemalloc-4.0.3 bits=64 build=5bc5cd3c03d6ceb6[root@iZwz97tbgo9lkabnat2lo8Z ~]# redis-cli --versionredis-cli 3.2.12 2.修改配置文件3.启动redis####1.启动redis服务器redis-server redis.conf – 启动redis服务redis-server redis.conf &amp; – 启动redis服务并且在后台运行redis-server redis.conf &gt;&gt; redis.log &amp; – 启动redis服务并且在后台运行,并且输出重定向 ####2.启动redis客户端redis-cli -h ip地址 4.redis指令123456789101112131415161718192021----字符串常用操作 set key value -- 添加键值对、如果key存在就修改key对应的值 setnx key value -- 如果key不存在就添加键值对setex key 时间 value -- 添加键值对并且设置存活时间 set key value ex 时间 -- 添加键值对并且设置超时时间 mset key1 value1 key2 value2 ... -- 同时添加多个键值对mget key1 key2 ... --同时获取多个key的值 get key -- 查看key对应的值 keys * -- 查看所有的key del key1 key2 -- 删除键值对 exists key -- 检测键值对是否存在 flushall -- 删除所有数据库的所有键值对 flushdb -- 删除当前数据库中所有键值对 select 标号 -- redis默认启动16个数据库对应的标号是0-15 ttl key -- 查看剩余时间 expire key 时间 -- 设置键值对存活时间 incr key -- 数值增加1 decr key -- 数值减少 append key 值 --key对应的字符串类型的值后追加指定的值 quit -- 退出]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sql高级操作2——高级查询例题]]></title>
    <url>%2F2019%2F02%2F28%2Fmysql%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C2%2F</url>
    <content type="text"><![CDATA[drop database if exists hrs;create database hrs default charset utf8; use hrs; drop table if exists tb_emp;drop table if exists tb_dept; – 部门表create table tb_dept(dno int not null comment ‘编号’,dname varchar(10) not null comment ‘名称’,dloc varchar(20) not null comment ‘所在地’,primary key (dno)); insert into tb_dept values (10, ‘会计部’, ‘北京’), (20, ‘研发部’, ‘成都’), (30, ‘销售部’, ‘重庆’), (40, ‘运维部’, ‘深圳’); – 员工表create table tb_emp(eno int not null comment ‘员工编号’,ename varchar(20) not null comment ‘员工姓名’,job varchar(20) not null comment ‘员工职位’,mgr int comment ‘主管编号’,sal int not null comment ‘员工月薪’,comm int comment ‘每月补贴’,dno int comment ‘所在部门编号’,primary key (eno)); alter table tb_emp add constraint fk_emp_dno foreign key (dno) references tb_dept (dno); insert into tb_emp values (7800, ‘张三丰’, ‘总裁’, null, 9000, 1200, 20), (2056, ‘乔峰’, ‘分析师’, 7800, 5000, 1500, 20), (3088, ‘李莫愁’, ‘设计师’, 2056, 3500, 800, 20), (3211, ‘张无忌’, ‘程序员’, 2056, 3200, null, 20), (3233, ‘丘处机’, ‘程序员’, 2056, 3400, null, 20), (3251, ‘张翠山’, ‘程序员’, 2056, 4000, null, 20), (5566, ‘宋远桥’, ‘会计师’, 7800, 4000, 1000, 10), (5234, ‘郭靖’, ‘出纳’, 5566, 2000, null, 10), (3344, ‘黄蓉’, ‘销售主管’, 7800, 3000, 800, 30), (1359, ‘胡一刀’, ‘销售员’, 3344, 1800, 200, 30), (4466, ‘苗人凤’, ‘销售员’, 3344, 2500, null, 30), (3244, ‘欧阳锋’, ‘程序员’, 3088, 3200, null, 20), (3577, ‘杨过’, ‘会计’, 5566, 2200, null, 10), (3588, ‘朱九真’, ‘会计’, 5566, 2500, null, 10); – 查询薪资最高的员工姓名和工资use hrs;(SELECT MAX(max_emp) as maxmax FROM (SELECT ename,sal+IF(comm,comm,0) as max_emp FROM tb_emp) as a1);SELECT ename,sal+IF(comm,comm,0) as ‘工资’ FROM tb_emp WHERE sal+IF(comm,comm,0)=(SELECT MAX(max_emp) as maxmax FROM (SELECT ename,sal+IF(comm,comm,0) as max_emp FROM tb_emp) as a1);– 查询员工的姓名和年薪((月薪+补贴)12)SELECT ename as ‘姓名’,(sal+IF(comm,comm,0))12 as ‘年薪’ FROM tb_emp;– 查询有员工的部门的编号和人数SELECT dno,COUNT(dno) FROM tb_emp GROUP BY dno;– 查询所有部门的名称和人数SELECT tb_dept.dno,COUNT(tb_emp.dno) FROM tb_dept LEFT JOIN tb_emp ON tb_dept.dno=tb_emp.dno GROUP BY tb_dept.dno;– 查询薪资最高的员工(Boss除外)的姓名和工资SELECT ename,sal+IF(comm,comm,0) as ‘工资’ FROM tb_emp WHERE sal+IF(comm,comm,0)=(SELECT MAX(max_emp) as maxmax FROM (SELECT ename,sal+IF(comm,comm,0) as max_emp FROM tb_emp WHERE mgr is NOT NULL) as a1);– 查询薪水超过平均薪水的员工的姓名和工资SELECT ename,sal+IF(comm,comm,0) as ‘工资’ FROM tb_emp WHERE sal+IF(comm,comm,0)&gt;(SELECT AVG(sal)+SUM(comm)/COUNT(ename) FROM tb_emp);– 查询薪水超过其所在部门平均薪水的员工的姓名、部门编号和工资SELECT dno,AVG(count_sal) as davg FROM (SELECT ename,dno,IF(comm,sal+comm,sal) as count_sal FROM tb_emp) as a2 GROUP BY a2.dno;SELECT ename,dno,IF(comm,sal+comm,sal) FROM tb_emp WHERE IF(comm,sal+comm,sal)&gt;(SELECT davg FROM (SELECT dno,AVG(count_sal) as davg FROM (SELECT ename,dno,IF(comm,sal+comm,sal) as count_sal FROM tb_emp) as a2 GROUP BY a2.dno) as a3 WHERE a3.dno=tb_emp.dno)– 查询部门中薪水最高的人姓名、工资和所在部门名称SELECT ename,dno,IF(comm,sal+comm,sal) FROM tb_emp WHERE IF(comm,sal+comm,sal)=(SELECT davg FROM (SELECT dno,MAX(count_sal) as davg FROM (SELECT ename,dno,IF(comm,sal+comm,sal) as count_sal FROM tb_emp) as a2 GROUP BY a2.dno) as a3 WHERE a3.dno=tb_emp.dno)– 查询主管的姓名和职位SELECT ename,job FROM tb_emp WHERE eno in (SELECT DISTINCT mgr FROM tb_emp);– 查询薪资排名4~6名的员工姓名和工资SELECT ename,IF(comm,sal+comm,sal) as count_com FROM tb_emp ORDER BY count_com DESC LIMIT 3 OFFSET 3;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sql高级操作及常见查询]]></title>
    <url>%2F2019%2F02%2F28%2Fmysql%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[sql条件语句: = &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 等于 &lt;&gt; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 不等于 &gt; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 大于 &lt; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 小于 = &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 大于等于 &lt;= &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 小于等于 and &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 逻辑与运算 or &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 逻辑或运算 in &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 集合运算; 例如： stuid in(1001， 1002); 选中stuid值是1001和1002的行 between 值1 and 值2 &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 在值1和值2之间 like –通常配合通配符%和_一起使用 注意: 如果条件是判断某个字段是否为空，不能使用=null和&lt;&gt;null要用is null 和 is not null SQL数据类型:在 MySQL 中，有三种主要的类型：文本、数字和日期/时间类型。 一下是MySQL中常见的数据类型。MySQL数据类型 char(size) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 定长字符串 varchar(size) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 保存可变长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的最大长度。最多 255 个字符 text &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 存放最大长度为 65,535 个字符的字符串。 int(size) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; – -2147483648 到 2147483647 常规。0 到 4294967295 无符号*。在括号中规定最大位数。 FLOAT(size,d) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;–带有浮动小数点的小数字。在括号中规定最大位数。在 d 参数中规定小数点右侧的最大位数。 DOUBLE(size,d) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; –带有浮动小数点的大数字。在括号中规定最大位数。在 d 参数中规定小数点右侧的最大位数。 bit &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 相当于bool类型，只有0和1两个值 date &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 日期。格式：YYYY-MM-DD, 支持的范围是从 ‘1000-01-01’ 到 ‘9999-12-31’ DATETIME &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 日期和时间的组合。格式：YYYY-MM-DD HH:MM:SS TIMESTAMP &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 时间戳。TIMESTAMP 值使用 Unix 纪元(‘1970-01-01 00:00:00’ UTC) 至今的描述来存储。格式：YYYY-MM-DD HH:MM:SS TIME &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;– 时间。格式：HH:MM:SS 注释：支持的范围是从 ‘-838:59:59’ 到 ‘838:59:59’ SQL约束:not null – 不能为空default 值 – 设置默认值primary key – 主键约束（主键是表中能够唯一标识一条记录的列）unique – 值唯一 ##5.约束管理 #####1.添加约束/索引alter table 表名 add constraint 索引名 约束(字段名); &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;–给指定字典添加指定约束 #####2.删除索引alter table 表名 drop index 索引名; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;–移除指定索引对应的约束 #####3.添加外键约束alter table 表名 add constraint 外键索引名 foreign key (字段1) references 表名2 (字段2) #####4.删除外键约束alter table 表名 drop foreign key 外键索引名; ##6.高级操作 #####1.聚合max() – 最大值min() – 最小值sum() – 求和avg() – 求平均值count() – 求个数 #####2.分组group by(字段) – 按照指定字段的值进行分组注意: 如果是对分组后的结果进行筛选不能使用where而是使用having #####3.连接内连接: inner join 表名 on 连接条件 左外连接就是把左表不满足连接条件的记录也查出来对应的记录补上null左外连接: left outer join 表名 on 连接条件右外连接: right outer join 表名 on 连接条件 #####4.添加索引create index 索引名 on 表(字段);alter table 表名 drop index from 索引名; ##7.DCL - grant/revoke #####1.创建用户create user ‘用户名‘@’登录地址’ identified by ‘密码’; – 登录地址可以是localhost表示本机登录，也可以是指定的ip地址，还可以是%表示任意地址 #####2.授权grant 权限类型 on 数据库.对象 to 用户; – 为指定用户添加指定数据库的指定对象的指定权限revoke 权限类型 on 数据库.对象 from 用户; – 撤销/召回指定用户对指定数据库的指定对象的指定权限 权限类型: select(查看), insert(添加),delete(删除),update(更新),creat(创建),drop(删除), alter(更改), all privileges(所有权限) grant 权限类型 on 数据库.对象 to 用户 with grant option; –添加权限，并且可以将自己的权限再授权给别人 #####3.事务begin; –开启事务环境commit; –事务提交rollback; –事务回滚 – 查询所有学生信息SELECT * FROM tb_student; – 查询所有课程名及学分SELECT couname, credit FROM tb_course; – 查询所有女学生的姓名– ALTER TABLE tb_student ADD COLUMN gender bit DEFAULT 1;SELECT stuname FROM tb_student WHERE gender=0; – 查询所有80后学生的姓名、性别和出生日期SELECT stuname, if(gender,’男’,’女’),birth FROM tb_student WHERE birth BETWEEN ‘1980-1-1’ AND ‘1989-12-31’; – 查询姓 ’王‘的学生姓名和性别(模糊)SELECT stuname, gender FROM tb_student WHERE stuname LIKE ‘王%’; – 查询姓’王‘名字两个字的学生姓名和性别（模糊）SELECT stuname, gender FROM tb_student WHERE stuname LIKE ‘王_’;– 查询名字中有’义’或’大’字的学生的姓名SELECT stuname FROM tb_student WHERE stuname LIKE ‘%义%’ or stuname LIKE ‘%大%’; – 查询录入了家庭住址的学生姓名(空值)SELECT stuname FROM tb_student WHERE addr is NOT NULL; – 查询没有录入家庭地址的学生姓名(空值)SELECT stuname FROM tb_student WHERE addr is NULL; – 查询选过课的学生的id(去重)SELECT DISTINCT stuid FROM tb_score; – 查询选过课的学生的名字(去重)SELECT stuname FROM tb_student WHERE stuid in (SELECT stuid FROM tb_score); – 查询没有选过课的学生的id()SELECT stuid FROM (SELECT tb_student.stuid, couid FROM tb_scoreRIGHT JOIN tb_student on tb_score.stuid = tb_student.stuid) as t1 WHERE couid is NULL; – 查询没有选过课的学生的名字()SELECT stuname FROM (SELECT stuname, couid FROM tb_scoreRIGHT JOIN tb_student on tb_score.stuid = tb_student.stuid) as t1 WHERE couid is NULL; – 查询学生的家庭住址(去重)SELECT DISTINCT addr FROM tb_student; – 查询男学生的姓名和生日按年龄从大到小排序(排序)SELECT stuname, birth FROM tb_student WHERE gender=1 ORDER BY birth ASC; – 查询年龄最大的学生的出生日期(聚合函数)SELECT min(birth) FROM tb_student; – 查询年龄最小的学生的出生日期（聚合函数）SELECT max(birth) FROM tb_student;– 查询年龄最小的学生的名字和出生日期SELECT stuname, birth FROM tb_student WHERE birth = (SELECT max(birth) FROM tb_student); – 查询课程编号为2的课程的平均成绩(筛选和聚合函数)SELECT avg(mark) FROM tb_score WHERE couid=2; – 查询学号为101的学生所有课程的总成绩(筛选和聚合函数)SELECT sum(mark) FROM tb_score WHERE stuid=101; – 查询男女学生的人数(分组和聚合函数)SELECT if(gender,’男’,’女’) as ‘性别’,COUNT(stuid) as ‘人数’ FROM tb_student GROUP BY(gender); – 查询每个学生的学号和成绩平均值(分组和聚合函数)SELECT stuid,avg(mark) as avgmark FROM tb_score GROUP BY(stuid); – 查询所有学生的平均成绩SELECT stuname, avgmark FROM (SELECT stuid,avg(mark) as avgmark FROM tb_score GROUP BY(stuid)) as t1RIGHT JOIN tb_student ON tb_student.stuid=t1.stuid; – 查询平均成绩大于等于90分的学生的学号和平均成绩SELECT stuid,avg(mark) as avgmark FROM tb_score GROUP BY(stuid) HAVING avg(mark)&gt;90; – 查询年龄最大的学生的姓名(子查询)SELECT stuname FROM tb_student WHERE birth=(SELECT min(birth) FROM tb_student); – 查询选课学生的姓名和平均成绩(子查询和连接查询)SELECT stuname, avgmark FROM (SELECT stuid, avg(mark) as avgmark FROM tb_score GROUP BY(stuid)) as tempINNER JOIN tb_student on temp.stuid=tb_student.stuid;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sql高级操作2——高级查询例题]]></title>
    <url>%2F2019%2F02%2F25%2Fsql%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[drop database if exists hrs;create database hrs default charset utf8; use hrs; drop table if exists tb_emp;drop table if exists tb_dept; – 部门表create table tb_dept(dno int not null comment ‘编号’,dname varchar(10) not null comment ‘名称’,dloc varchar(20) not null comment ‘所在地’,primary key (dno)); insert into tb_dept values (10, ‘会计部’, ‘北京’), (20, ‘研发部’, ‘成都’), (30, ‘销售部’, ‘重庆’), (40, ‘运维部’, ‘深圳’); – 员工表create table tb_emp(eno int not null comment ‘员工编号’,ename varchar(20) not null comment ‘员工姓名’,job varchar(20) not null comment ‘员工职位’,mgr int comment ‘主管编号’,sal int not null comment ‘员工月薪’,comm int comment ‘每月补贴’,dno int comment ‘所在部门编号’,primary key (eno)); alter table tb_emp add constraint fk_emp_dno foreign key (dno) references tb_dept (dno); insert into tb_emp values (7800, ‘张三丰’, ‘总裁’, null, 9000, 1200, 20), (2056, ‘乔峰’, ‘分析师’, 7800, 5000, 1500, 20), (3088, ‘李莫愁’, ‘设计师’, 2056, 3500, 800, 20), (3211, ‘张无忌’, ‘程序员’, 2056, 3200, null, 20), (3233, ‘丘处机’, ‘程序员’, 2056, 3400, null, 20), (3251, ‘张翠山’, ‘程序员’, 2056, 4000, null, 20), (5566, ‘宋远桥’, ‘会计师’, 7800, 4000, 1000, 10), (5234, ‘郭靖’, ‘出纳’, 5566, 2000, null, 10), (3344, ‘黄蓉’, ‘销售主管’, 7800, 3000, 800, 30), (1359, ‘胡一刀’, ‘销售员’, 3344, 1800, 200, 30), (4466, ‘苗人凤’, ‘销售员’, 3344, 2500, null, 30), (3244, ‘欧阳锋’, ‘程序员’, 3088, 3200, null, 20), (3577, ‘杨过’, ‘会计’, 5566, 2200, null, 10), (3588, ‘朱九真’, ‘会计’, 5566, 2500, null, 10); – 查询薪资最高的员工姓名和工资use hrs;(SELECT MAX(max_emp) as maxmax FROM (SELECT ename,sal+IF(comm,comm,0) as max_emp FROM tb_emp) as a1);SELECT ename,sal+IF(comm,comm,0) as ‘工资’ FROM tb_emp WHERE sal+IF(comm,comm,0)=(SELECT MAX(max_emp) as maxmax FROM (SELECT ename,sal+IF(comm,comm,0) as max_emp FROM tb_emp) as a1);– 查询员工的姓名和年薪((月薪+补贴)12)SELECT ename as ‘姓名’,(sal+IF(comm,comm,0))12 as ‘年薪’ FROM tb_emp;– 查询有员工的部门的编号和人数SELECT dno,COUNT(dno) FROM tb_emp GROUP BY dno;– 查询所有部门的名称和人数SELECT tb_dept.dno,COUNT(tb_emp.dno) FROM tb_dept LEFT JOIN tb_emp ON tb_dept.dno=tb_emp.dno GROUP BY tb_dept.dno;– 查询薪资最高的员工(Boss除外)的姓名和工资SELECT ename,sal+IF(comm,comm,0) as ‘工资’ FROM tb_emp WHERE sal+IF(comm,comm,0)=(SELECT MAX(max_emp) as maxmax FROM (SELECT ename,sal+IF(comm,comm,0) as max_emp FROM tb_emp WHERE mgr is NOT NULL) as a1);– 查询薪水超过平均薪水的员工的姓名和工资SELECT ename,sal+IF(comm,comm,0) as ‘工资’ FROM tb_emp WHERE sal+IF(comm,comm,0)&gt;(SELECT AVG(sal)+SUM(comm)/COUNT(ename) FROM tb_emp);– 查询薪水超过其所在部门平均薪水的员工的姓名、部门编号和工资SELECT dno,AVG(count_sal) as davg FROM (SELECT ename,dno,IF(comm,sal+comm,sal) as count_sal FROM tb_emp) as a2 GROUP BY a2.dno;SELECT ename,dno,IF(comm,sal+comm,sal) FROM tb_emp WHERE IF(comm,sal+comm,sal)&gt;(SELECT davg FROM (SELECT dno,AVG(count_sal) as davg FROM (SELECT ename,dno,IF(comm,sal+comm,sal) as count_sal FROM tb_emp) as a2 GROUP BY a2.dno) as a3 WHERE a3.dno=tb_emp.dno)– 查询部门中薪水最高的人姓名、工资和所在部门名称SELECT ename,dno,IF(comm,sal+comm,sal) FROM tb_emp WHERE IF(comm,sal+comm,sal)=(SELECT davg FROM (SELECT dno,MAX(count_sal) as davg FROM (SELECT ename,dno,IF(comm,sal+comm,sal) as count_sal FROM tb_emp) as a2 GROUP BY a2.dno) as a3 WHERE a3.dno=tb_emp.dno)– 查询主管的姓名和职位SELECT ename,job FROM tb_emp WHERE eno in (SELECT DISTINCT mgr FROM tb_emp);– 查询薪资排名4~6名的员工姓名和工资SELECT ename,IF(comm,sal+comm,sal) as count_com FROM tb_emp ORDER BY count_com DESC LIMIT 3 OFFSET 3;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编辑器之神——vim]]></title>
    <url>%2F2019%2F02%2F23%2Fvim%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E%2F</url>
    <content type="text"><![CDATA[vim编辑器之神Vim是一个类似于Vi的著名的功能强大、高度可定制的文本编辑器，在Vi的基础上改进和增加了很多特性。VIM是自由软件。Vim普遍被推崇为类Vi编辑器中最好的一个，事实上真正的劲敌来自Emacs的不同变体。注意：我们常说的的编辑器之神是指vim，而神之编辑器是指Emacs，我们这里介绍的是vim编辑器 配置vimrc配置在shell中可以通过 vim ~/.vimrc 或者 vim /etc/vimrc 打开vimrc文件对vim进行配置。在这个文件中可以进行很多和vim相关的配置，常用的如下（如果对其他配置感兴趣的可以自己百度）： 常用操作1.模式切换我们可以将vim分为命令模式、编辑模式和末行模式三种命令模式：进入vim的时候vim是处于命令模式状态下的，这个时候输入内容不会出现在编辑区 (最末什么都没有) 末行模式：在命令模式下输入冒号，让vim进入末行模式。在末行模式的冒号后面可以输入相关的一些指令进行相关操作 (最后有一个冒号) 编辑模式：在命令模式下按’i’进入编辑模式。在编辑模式下可以对文件内容进行编辑 (最后 –INSERT– 或者 –插入–) ####2.保存和退出在末行模式下输入相应的指令可以对编辑区的内容进行保存和退出vim界面w – 只保存(类似快捷键ctr+s)q – 退出（在编辑区的内容全部都保存的情况下才有效）wq – 保存并退出q! – 强制退出（不保存修改信息） ####3.光标操作以下光标操作都是在命令模式下输入的^(shift+6) – 移动到行首$(shift+4) – 移动到行尾G(shift+g) – 移动到文件末尾行号G – 移动到指定行,例如:30G, 让光标直接跳转到行号是30的那一行gg – 移动到文件开头 ####4.文本操作以下操作不带冒号的是在命令模式下输入，前面有冒号代码后面的内容是在末行模式下输入dd – 删除光标所在的行数字dd – 从光标所在行开始往后面开始删，删除指定数量行内容:%d – 删除所有 yy – 复制光标所在的行数字yy – 从光标所在行开始复制指定行数的内容p – 将复制的内容粘贴到光标所在的位置u – 撤销ctr+r – 反撤销 :%!sort – 对内容排序 :/查找对象[/gice] – 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找 **注意：正则表达式除了表示次数的符号前需要加\，别的和Python是一样的，例如“12:/\d&#123;2&#125; -》查找两个数字：/a\+ --》查找a出现一次或者多次 *:1,$s/被替换对象/替换内容[/gice]* – 将正则表达式匹配到的内容替换成指定内容 - g: 全局匹配 - i: 忽略大小写 - c: 替换时需要提示 - e: 忽略错误]]></content>
      <categories>
        <category>编辑器</category>
      </categories>
      <tags>
        <tag>vim 编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客搭建]]></title>
    <url>%2F2019%2F02%2F23%2FHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[一. 搭建博客使用hexo搭建个人博客前需要先在自己的电脑上装好git和node.js 1 . 首先在自己的电脑上创建一个空的文件夹’Hexo’2 . 在gitbash中终端中通过cd指令进入到刚才创建的文件夹中3 . 输入指令 npm install -g hexo 安装Hexo4 . 输入指令 hexo init 进行初始化5 . 依次输入指令npm install hexo server 启动服务器 博客内容发生改变后可以通过hexo clean hexo generate hexo deploy hexo server刷新后重新启动 二. 部署博客1 . 在github上创建一个空的仓库，仓库名： 用户名.github.io2 . 修改博客本地仓库中的配置文件（Hexo目录下的_config.yml文件）,在文件末尾添加一下选中内容 3 . 使用git部署, 输入指令npm install hexo-deployer-git --save4 . 输入指令hexo clean hexo generate hexo deploy 对博客进行提交]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo 博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL在Linux系统的安装配置]]></title>
    <url>%2F2019%2F02%2F22%2FMySQL%E5%9C%A8Linux%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%20%20-%20%E5%89%AF%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[下载MySQL源安装包: wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm 安装MySQL源: yum localinstall mysql57-community-release-el7-8.noarch.rpm 安装MySQL: yum install mysql-community-server 设置开启启动MySQL服务: systemctl enable mysqld 启动/重启MySQL服务：systemctl restart mysqld 查看MySQL初始密码：grep ‘A temporary password’ /var/log/mysqld.log 更改MySQL密码：mysqladmin -u root -p’旧密码’ password ‘新密码’ 这里更改密码出了问题，更改失败，这是因为密码太过简单的原因。有两个接解决方法： 方法一：把密码设置复杂点（这是最直接的方法） 方法二：关闭mysql密码强度验证(validate_password) 编辑配置文件：vim /etc/my.cnf， 增加这么一行validate_password=off 编辑后重启mysql服务：systemctl restart mysqld 设置mysql能够远程访问: a. 登录进MySQL: mysql -uroot -p密码 b. 增加一个用户给予访问权限: grant all privileges on *.* to &#39;root&#39;@&#39;ip地址&#39; identified by &#39;密码&#39; with grant option; c. 刷新权限：flush privileges;­]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx服务器]]></title>
    <url>%2F2019%2F02%2F22%2FNginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[1.阿里云添加80端口阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口 ![打开安全组设置]添加80端口 2. 安装nginxa) 添加nginx存储库 1yum install epel-release b) 安装nginx 1234 yum install nginx``` c) 运行nginx Nginx不会自行启动。要运行Nginx systemctl start nginx 12nginx的运行命令: systemctl status nginx 查看nginx的状态 systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动 12d) 系统启动时启动Nginx systemctl enable nginx 12e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信： sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=https sudo firewall-cmd --reload 12345### 3.nginx目录共享配置 a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yuting b) 打开 etc/nginx/nginx.conf 文件，设置server #共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表 root /home/yuting; location / { autoindex on; autoindex_exact_size on; autoindex_localtime on; } 12除了可以共享文件，还可以自定义页面 #自定义服务器页面 location / { root /home/yuting; index index.html index.htm; } ` 注意： 如果出现权限问题，可以修改目录的权限 ssh密钥认证1.在主机和从机上执行：ssh-keygen 2.在从机上执行: scp id_rsa.pub root@主机地址:~/.ssh/master.pub(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’) 3.在主机中的.ssh文件夹中创建authorized_keys文件： touch authorized_keys 4.修改文件authorized_keys的权限: chmod 600 authorized_keys 5.将master.pub放进authorized_keys文件中: cat master.pub &gt;&gt; authorized_keys 6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git常用指令]]></title>
    <url>%2F2019%2F02%2F21%2Fgit%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[1.基本指令git init &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; —— 新建git仓库git add 文件/文件夹 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; —— 将文件添加到缓存区中git add -A &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; — 添加所有内容到缓存区中git stutas &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——— 查看git状态git commit -m ‘提交信息’ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 将缓存区中的内容全部提交到git本地仓库中 git log &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——- 查看提交日志 git reset - - hard HEAD &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 让工作目录中的内容和仓库中的内容保持一致git reset --hard HEAD^ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 回到上一个版本git reset - - hard 版本号 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 回到指定的版本git checkout - - 文件名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; —— 从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态) git clone &lt;url&gt; - 将服务器上的项目(仓库)克隆 (使用https地址需要输入密码，使用ssh地址需要添加公钥) git remote add origin 地址 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 关联远程仓库(只需要关联一次) git push [-u] origin master &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 提交(-u在第一次提交分之的时候才用) 2.分之管理创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之;开发一般会自己创建一个develop分之，用来开发和测试;多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发 常见分之： master(主要是合并develop), develop(主要合并下面的其他分支), 功能/人员分之(开发) git branch [-a] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - 查看分之git branch 分之名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 创建分之git checkout 分支名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 切换分之git checkout -b 分之名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - 切换并创建新的分之git diff 分之1 分之2 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 查看两个分之之间的差异git merge 分之名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 让当前分之和指定分之进行合并 注意: 切换分之、push、pull，这些操作前要保证工作区是clean 怎么避免冲突： 不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量)]]></content>
      <categories>
        <category>系统操作</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F02%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
